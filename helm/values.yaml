affinity: {}
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80

# Redis configurations
redis:
  auth:
    enabled: false

# Kafka configutaions
kafkaEnabled: false

# Tika configurations
tikaEnabled: false

# Array containing extra env vars to load
extraEnvVars:
  - name: MESSAGE_CLIENT_HOST
    value: "nv-ingest-redis-master"
  - name: MESSAGE_CLIENT_PORT
    value: "6379"
  - name: REDIS_MORPHEUS_TASK_QUEUE
    value: "morpheus_task_queue"
  - name: NV_INGEST_DEFAULT_TIMEOUT_MS
    value: "1234"
  - name: NGC_API_KEY
    valueFrom:
      secretKeyRef:
        name: ngcapisecrets
        key: ngc_api_key
  # OpenTelemetry
  - name: HOST_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: OTEL_EXPORTER_OTLP_ENDPOINT
    value: "http://$(HOST_IP):4317" # sends to gRPC receiver on port 4317
  - name: OTEL_SERVICE_NAME
    value: "nemo-retrieval-service"
  - name: OTEL_TRACES_EXPORTER
    value: otlp
  - name: OTEL_METRICS_EXPORTER
    value: otlp
  - name: OTEL_LOGS_EXPORTER
    value: none
  - name: OTEL_PROPAGATORS
    value: "tracecontext,baggage"
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "deployment.environment=$(NAMESPACE)"
  - name: OTEL_PYTHON_EXCLUDED_URLS
    value: "health"
  - name: LOG_LEVEL
    value: DEBUG
# ConfigMap containing extra env vars to load
extraEnvVarsCM: ""
# Secret containing extra sensitive env vars to load
extraEnvVarsSecret: ""
fullnameOverride: ""
image:
  pullPolicy: IfNotPresent
  repository: ""
  tag: ""
imagePullSecrets:
  - name: gitlab-imagepull
ingress:
  annotations: {}
  className: ""
  enabled: false
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
livenessProbe:
  httpGet:
    path: /health
    port: http
  periodSeconds: 10
  timeoutSeconds: 20
  failureThreshold: 20 

nameOverride: ""
nodeSelector: {}
otelEnabled: false
opentelemetry-collector:
  mode: deployment
  config:
    receivers:
      otlp:
        protocols:
          grpc:
          http:
            cors:
              allowed_origins:
                - "*"
    exporters:
      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
      zipkin:
        endpoint: "http://nv-ingest-ms-runtime-zipkin:9411/api/v2/spans"
      debug:
        verbosity: detailed
    extensions:
      health_check: {}
      zpages:
        endpoint: 0.0.0.0:55679
    processors:
      batch: {}
      tail_sampling:
        # filter out health checks
        # https://github.com/open-telemetry/opentelemetry-collector/issues/2310#issuecomment-1268157484
        policies:
          - name: drop_noisy_traces_url
            type: string_attribute
            string_attribute:
              key: http.target
              values:
                - \/health
              enabled_regex_matching: true
              invert_match: true
      transform:
        trace_statements:
          - context: span
            statements:
              - set(status.code, 1) where attributes["http.path"] == "/health"

              # after the http target has been anonymized, replace other aspects of the span
              - replace_match(attributes["http.route"], "/v1", attributes["http.target"]) where attributes["http.target"] != nil

              # replace the title of the span with the route to be more descriptive
              - replace_pattern(name, "/v1", attributes["http.route"]) where attributes["http.route"] != nil

              # set the route to equal the URL if it's nondescriptive (for the embedding case)
              - set(name, Concat([name, attributes["http.url"]], " ")) where name == "POST"
    service:
      extensions: [zpages, health_check]
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [debug, zipkin]
          processors: [tail_sampling, transform]
        metrics:
          receivers: [otlp]
          exporters: [debug]
          processors: [batch]
        logs:
          receivers: [otlp]
          exporters: [debug]
          processors: [batch]
podAnnotations:
  traffic.sidecar.istio.io/excludeOutboundPorts: '8007'
podLabels: {}
podSecurityContext:
  fsGroup: 1000
# TODO: jdyer - uncomment this when microservice is added, currently no /health endpoint exists to check ...
# readinessProbe:
#   httpGet:
#     path: /health
#     port: http
replicaCount: 1
resources:
  limits:
    memory: 1Gi
    nvidia.com/gpu: 1
  requests:
    memory: 512Mi
securityContext: {}
service:
  port: 8000
  type: ClusterIP
  # string with space-delimited additional arguments to be passed to 'uvicorn'
  # in the service's main container
  extraEntrypointArgs: ""
serviceAccount:
  annotations: {}
  automount: true
  create: true
  name: ""
tolerations: []
# zipkin overrides
zipkinEnabled: false
